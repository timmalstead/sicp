; To become experts, we must learn to visualize the processes generated by various types of procedures.  Only after we have developed such a skill can we learn to reliably construct programs that exhibit the desired behavior.

(define (factorial-recur n) (
        if (= n 1) 
            1 
            (* n (factorial-recur (- n 1)))
    )
)

(define (factorial-iter product counter max-count) (
        (if (> counter max-count)
            product
            (factorial-iter 
                (* counter product)
                (+ counter 1)
                max-count
            )
        )
    )
)

(define (factorial n) (factorial-iter 1 1 n))

(factorial-recur 6)
(factorial 6)

; factorial-recur is a linear recursive process, it computes all the steps that are needed, 'expanding' if you will, and then 'contracts' by computing all those steps

;factorial-iter is a linear iterative process. at each step we need to keep track of the local state variables, and at each iteration we test to see if it is time to end the iteration

;in an iterative case, the variables keep track of the info at each step, whereas with the recursive function, that is all calculated at the end. i imagine that's at least part of why recursive functions are more likely to overflow a stack

;so, both of these are recursive procedures/functions. this is true. but one is a recursive process and one is an iterative one.

;so what's the deal with that? well, on the linear recursive process, the computaton is all done once the base case has been reached. whereas in the linear iterative process, the computation is done during each iteration. if you stopped the process after 4 cycles, you would not need to rerun those cycles, because you are updating the state variables at each step in the process

;tail recursion refers to a recursive iterative process that can be executed in constant space. i've heard this before and do not completely understand it, so i will be excited to learn more about it

;Exercise 1.9.  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

; doesn't look like this implementation of scheme has inc or dec

;Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

(define (plus-recur a b) (
        if (= a 0)
            b
            (+ 
                (plus (- a 1) b)
                1
            )
    )
)
(plus-recur 4 5)

; plus-recur is a linear recursive process. it evaluates all the decrements of a until a = 0 then comes back from that base case finishing up all the increments

; (plus 3 3)
; a = 3 , b = 3
; does not equal 0
; a = a - 1, a = 2, b = 3

(define (plus-iter a b) ( 
        if (= a 0)
            b
            (plus-iter (- a 1) (+ b 1))
    )
)
(plus-iter 4 5)

;plus-iter is rucursive procedure but a linear iterative process both the sum b and the 'countdown' a are both being updated with each iteration

(define (ack x y) (
        cond 
            ( (= y 0) 0 )
            ( (= x 0) (* 2 y) )
            ( (= y 1) 2 )
            ( else 
                ( ack 
                    (- x 1) 
                    (ack x (- y 1))
                )
            )
    )
)

(ack 2 4)

; okay, so that's a bit mathy for me right now, but i may revisit